// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  name         String
  email        String?  @unique
  phone        String?
  login        String?  @unique
  passwordHash String   @map("password_hash")
  role         String   @default("user")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  appointments Appointment[]

  @@map("users")
}

model ServiceCategory {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  order       Int      @default(0)
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  services Service[]

  @@map("service_categories")
}

model Service {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  price       Decimal  @db.Decimal(10, 2)
  duration    String? // "15-30 мин", "1-2 часа", etc.
  preparation String? // "Без подготовки", "Требуется подготовка"
  categoryId  Int      @map("category_id")
  order       Int      @default(0)
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  category     ServiceCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  appointments Appointment[]

  @@map("services")
}

model Appointment {
  id              Int      @id @default(autoincrement())
  userId          Int      @map("user_id")
  serviceId       Int      @map("service_id")
  appointmentDate DateTime @map("appointment_date") @db.Date
  appointmentTime DateTime @map("appointment_time") @db.Time
  notes           String?
  status          String   @default("scheduled")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  service Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@map("appointments")
}

model Banner {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  buttonText  String?  @map("button_text")
  buttonUrl   String?  @map("button_url")
  imageUrl    String?  @map("image_url")
  imageAlt    String?  @map("image_alt")
  order       Int      @default(0)
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("banners")
}

model Advantage {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  order       Int      @unique // 1, 2, 3, 4 - уникальный порядок
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("advantages")
}

model Branch {
  id           Int      @id @default(autoincrement())
  title        String
  address      String
  phone        String?
  email        String?
  workingHours String?  @map("working_hours")
  order        Int      @default(0)
  isActive     Boolean  @default(true) @map("is_active")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@map("branches")
}
